load("@rules_haskell//haskell:defs.bzl", "haskell_binary", "haskell_toolchain_library")

constraint_setting(
    name = "executable_linking",
    visibility = ["//visibility:public"],
)

constraint_value(
    name = "fully_static_linking",
    constraint_setting = ":executable_linking",
    visibility = ["//visibility:public"],
)

platform(
    name = "static_executable",
    constraint_values = [":fully_static_linking"],
    parents = ["@io_tweag_rules_nixpkgs//nixpkgs/platforms:host"],
    visibility = ["//visibility:public"],
)

constraint_value(
    name = "regular_linking",
    constraint_setting = ":executable_linking",
    visibility = ["//visibility:public"],
)

platform(
    name = "regular_executable",
    constraint_values = [":regular_linking"],
    parents = ["@io_tweag_rules_nixpkgs//nixpkgs/platforms:host"],
    visibility = ["//visibility:public"],
)

haskell_toolchain_library(name = "base")

haskell_binary(
    name = "skyscope",
    srcs = [
        ":src/Common.hs",
        ":src/Import.hs",
        ":src/Main.hs",
        ":src/Model.hs",
        ":src/Query.hs",
        ":src/Render.hs",
        ":src/Server.hs",
        ":src/Sqlite.hs",
    ],
    extra_srcs = [
        "//frontend:main.js",
        "//frontend:src/index.js",
        "//frontend:src/format.js",
        "//frontend:src/theme.css",
        "//backend:src/schema.sql",
    ],
    features = select({
        "@//backend:regular_linking": [],
        "@//backend:fully_static_linking": ["fully_static_link"],
    }),
    ghcopts = [
        "-O2",
        "-Wall",
        #"-Werror",
        "-Wno-name-shadowing",
        "-fno-omit-yields",
        #"-fobject-code",
        "-threaded",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":base",
        ":import",
        ":path",
        "@stackage//:HList",
        "@stackage//:aeson",
        "@stackage//:attoparsec",
        "@stackage//:bytestring",
        "@stackage//:byteunits",
        "@stackage//:containers",
        "@stackage//:cryptohash-sha256",
        "@stackage//:direct-sqlite",
        "@stackage//:directory",
        "@stackage//:file-embed",
        "@stackage//:filemanip",
        "@stackage//:filepath",
        "@stackage//:graphviz",
        "@stackage//:hdaemonize",
        "@stackage//:http-client",
        "@stackage//:http-types",
        "@stackage//:mtl",
        "@stackage//:process",
        "@stackage//:process-extras",
        "@stackage//:scotty",
        "@stackage//:stm",
        "@stackage//:template-haskell",
        "@stackage//:temporary",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:transformers",
        "@stackage//:unix",
        "@stackage//:uuid",
        "@stackage//:wai",
        "@stackage//:warp",
        "@stackage//:zlib",
    ],
)

optimisations = [
    #"-Q",
    #"--help=optimizers",

    #"-O0", # Default

    #"-O1",
    "-fauto-inc-dec",
    "-fbranch-count-reg",
    "-fcombine-stack-adjustments",
    "-fcompare-elim",
    "-fcprop-registers",
    "-fdce",
    "-fdefer-pop",
    "-fdse",
    "-fforward-propagate",
    "-fguess-branch-probability",
    "-fif-conversion",
    "-fif-conversion2",
    "-finline-functions-called-once",
    "-fipa-modref",
    "-fipa-profile",
    "-fipa-pure-const",
    "-fipa-reference",
    "-fipa-reference-addressable",
    "-fmerge-constants",
    "-fmove-loop-invariants",
    "-fomit-frame-pointer",
    "-freorder-blocks",
    "-fshrink-wrap",
    "-fshrink-wrap-separate",
    "-fsplit-wide-types",
    "-fssa-backprop",
    "-fssa-phiopt",
    "-ftree-bit-ccp",
    "-ftree-ccp",
    "-ftree-ch",
    "-ftree-coalesce-vars",
    "-ftree-copy-prop",
    "-ftree-dce",
    "-ftree-dominator-opts",
    "-ftree-dse",
    "-ftree-forwprop",
    "-ftree-fre",
    "-ftree-phiprop",
    "-ftree-pta",
    "-ftree-scev-cprop",
    "-ftree-sink",
    "-ftree-slsr",
    "-ftree-sra",
    "-ftree-ter",
    "-funit-at-a-time",

    #"-O2",
    "-falign-functions",
    "-falign-jumps",
    "-falign-labels",
    "-falign-loops",
    "-fcaller-saves",
    "-fcode-hoisting",
    "-fcrossjumping",
    "-fcse-follow-jumps",
    "-fcse-skip-blocks",
    "-fdelete-null-pointer-checks",
    "-fdevirtualize",
    "-fdevirtualize-speculatively",
    "-fexpensive-optimizations",
    "-ffinite-loops",
    "-fgcse",
    "-fgcse-lm",
    "-fhoist-adjacent-loads",
    "-finline-functions",
    "-finline-small-functions",
    "-findirect-inlining",
    "-fipa-bit-cp",
    "-fipa-cp",
    "-fipa-icf",
    "-fipa-ra",
    "-fipa-sra",
    "-fipa-vrp",
    "-fisolate-erroneous-paths-dereference",
    "-flra-remat",
    "-foptimize-sibling-calls",
    "-foptimize-strlen",
    "-fpartial-inlining",
    "-fpeephole2",
    "-freorder-blocks-algorithm=stc",
    "-freorder-blocks-and-partition",
    "-freorder-functions",
    "-frerun-cse-after-loop",
    "-fschedule-insns",
    "-fschedule-insns2",
    "-fsched-interblock",
    "-fsched-spec",
    "-fstore-merging",
    "-fstrict-aliasing",
    "-fthread-jumps",
    "-ftree-builtin-call-dce",
    "-ftree-pre",
    "-ftree-switch-conversion",
    "-ftree-tail-merge",
    "-ftree-vrp",

    #"-Q3",
    "-fgcse-after-reload",
    "-fipa-cp-clone",
    "-floop-interchange",
    "-floop-unroll-and-jam",
    "-fpeel-loops",
    "-fpredictive-commoning",
    "-fsplit-loops",
    "-fsplit-paths",
    "-ftree-loop-distribution",
    "-ftree-partial-pre",
    "-funswitch-loops",
    "-fvect-cost-model=dynamic",
    "-fversion-loops-for-strides",
]

copts = [
    "-Wall",
    "-Werror",
    "-std=c++20",
] + optimisations

cc_library(
    name = "path",
    srcs = [":src/path.cpp"],
    copts = copts,
)

cc_library(
    name = "import",
    srcs = [":src/import.cpp"],
    copts = copts,
    linkstatic = True,
    deps = select({
        "@//backend:regular_linking": ["@sqlite.dev"],
        "@//backend:fully_static_linking": ["@sqlite.dev.static//:sqlite.dev"],
    }),
)

