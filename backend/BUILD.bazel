load("@rules_haskell//haskell:defs.bzl", "haskell_binary", "haskell_toolchain_library")

constraint_setting(
    name = "executable_linking",
    visibility = ["//visibility:public"],
)

constraint_value(
    name = "fully_static_linking",
    constraint_setting = ":executable_linking",
    visibility = ["//visibility:public"],
)

platform(
    name = "static_executable",
    constraint_values = [":fully_static_linking"],
    parents = ["@io_tweag_rules_nixpkgs//nixpkgs/platforms:host"],
    visibility = ["//visibility:public"],
)

constraint_value(
    name = "regular_linking",
    constraint_setting = ":executable_linking",
    visibility = ["//visibility:public"],
)

platform(
    name = "regular_executable",
    constraint_values = [":regular_linking"],
    parents = ["@io_tweag_rules_nixpkgs//nixpkgs/platforms:host"],
    visibility = ["//visibility:public"],
)

haskell_toolchain_library(name = "base")

haskell_binary(
    name = "skyscope",
    srcs = [
        ":src/Common.hs",
        ":src/Import.hs",
        ":src/Main.hs",
        ":src/Model.hs",
        ":src/Query.hs",
        ":src/Render.hs",
        ":src/Server.hs",
        ":src/Sqlite.hs",
    ],
    extra_srcs = [
        "//frontend:main.js",
        "//frontend:src/index.js",
        "//frontend:src/format.js",
        "//frontend:src/theme.css",
        "//backend:src/schema.sql",
    ],
    features = select({
        "@//backend:regular_linking": [],
        "@//backend:fully_static_linking": ["fully_static_link"],
    }),
    ghcopts = [
        "-O2",
        "-Wall",
        "-Werror",
        "-Wno-name-shadowing",
        "-fno-omit-yields",
        "-fobject-code",
        "-threaded",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":base",
        ":import",
        ":path",
        "@stackage//:HList",
        "@stackage//:aeson",
        "@stackage//:attoparsec",
        "@stackage//:bytestring",
        "@stackage//:byteunits",
        "@stackage//:containers",
        "@stackage//:cryptohash-sha256",
        "@stackage//:direct-sqlite",
        "@stackage//:directory",
        "@stackage//:file-embed",
        "@stackage//:filemanip",
        "@stackage//:filepath",
        "@stackage//:hdaemonize",
        "@stackage//:http-client",
        "@stackage//:http-types",
        "@stackage//:mtl",
        "@stackage//:process",
        "@stackage//:process-extras",
        "@stackage//:scotty",
        "@stackage//:stm",
        "@stackage//:template-haskell",
        "@stackage//:temporary",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:transformers",
        "@stackage//:unix",
        "@stackage//:uuid",
        "@stackage//:wai",
        "@stackage//:warp",
        "@stackage//:zlib",
    ],
)

copts = [
    "-O2",
    "-Wall",
    "-Werror",
    "-std=c++20",
]

cc_library(
    name = "path",
    srcs = [":src/path.cpp"],
    copts = copts,
)

cc_library(
    name = "import",
    srcs = [":src/import.cpp"],
    copts = copts,
    linkstatic = True,
    deps = select({
        "@//backend:regular_linking": ["@sqlite.dev"],
        "@//backend:fully_static_linking": ["@sqlite.dev.static//:sqlite.dev"],
    }),
)
