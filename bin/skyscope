#!/usr/bin/env bash
set -euo pipefail

# Find the version used in this workspace.
BAZEL_VERSION="$(bazel version |
  grep -Po '(?<=Build label: ).*'
)"

# Determine required options for version.
case "$BAZEL_VERSION" in
  3.*|4.*|5.*)
    DUMP_OPT="detailed"
    export SKYSCOPE_LEGACY_BAZEL="1"
    ;;
  *)
    DUMP_OPT="deps"
    ;;
esac

# Kill the server if it's running.
PID_FILE="$HOME/.skyscope/server.pid"
PID=$(cat "$PID_FILE" 2>/dev/null) && {
  kill $PID || true
  rm $PID_FILE
}

# Wrapper function for running skyscope binary.
run-skyscope() {
  SKYSCOPE_DIR="${BASH_SOURCE[0]%/bin/skyscope}"
  nix-shell --run "
      cd '$SKYSCOPE_DIR'
      bazel run //backend:skyscope -- +RTS -N -RTS $*
  " "$SKYSCOPE_DIR/shell.nix"
}

# Launch the server.
SERVER_PORT="28581"
run-skyscope server "$SERVER_PORT"

# Dump Skyframe graph and import it into a new database.
WORKSPACE="$(bazel info | grep -Po '(?<=workspace: ).*')"
DB_TEMPLATE="$(basename "$WORKSPACE")-XXXXX.sqlite"
IMPORT_DIR="$HOME/.skyscope/imports"
mkdir -p "$IMPORT_DIR"
DB_PATH="$(mktemp -p "$IMPORT_DIR" "$DB_TEMPLATE")"
bazel dump --skyframe=$DUMP_OPT | run-skyscope import "$DB_PATH"

# Let the server know about the imported graph.
URL_BASE="http://localhost:28581"
IMPORT_RESULT=$(curl -s -XPOST "$URL_BASE" -d "[\"$WORKSPACE\",\"$DB_PATH\"]")
URL="$URL_BASE/$(jq -r .importId <<<"$IMPORT_RESULT")"

printf "\nOpen this link in your browser:\n"
printf "  \x1b[1;36m%s\x1b[0m\n" "$URL"
